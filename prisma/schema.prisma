datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // extensions        = [postgis(version: "3.3.2")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?
  notes     Note[]
  devices   Device[]
  campaigns Campaign[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

enum Exposure {
  INDOOR
  OUTDOOR
  MOBILE
  UNKNOWN
}

enum Model {
  HOME_V2_LORA
}

model Device {
  id       String   @id @default(uuid())
  name     String
  exposure Exposure
  useAuth  Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  latitude  Float
  longitude Float

  sensors Sensor[]
  // @@index([location], name: "location_idx", type: Gist)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // the index for that column
  @@index([id], name: "device_id_idx", type: Hash)
}

model Sensor {
  id         String @id @default(uuid())
  title      String
  unit       String
  sensorType String

  lastMeasurement Json?

  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deviceId String
}

model Campaign {
  id                   String    @id @default(uuid())
  title                String
  feature              Json
  owner                User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId              String
  description          String
  keywords             String[]
  priority             Priority
  country              String
  participantCount     Int
  requiredParticipants Int?
  requiredSensors      Int?
  createdAt            DateTime
  updatedAt            DateTime
  startDate            DateTime
  endDate              DateTime?
  phenomena            String[]
  centerpoint          Json?
  events               String[]
  exposure             Exposure
  location_points      Json?
  hardware_available   Boolean
  grouptag             String[]
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
}
