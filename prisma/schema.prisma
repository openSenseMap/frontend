datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  extensions        = [timescaledb(version: "2.10.2")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

//* updated user model
model User {
  id    String @id @default(cuid())
  name String @unique
  email String @unique
  role String @default("user")
  language String @default("en_US")
  boxes String[]
  emailIsConfirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  devices  Device[]

  profile Profile?
}

model Profile {
  id String @id @default(cuid())

  name   String  @unique
  public Boolean

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

//* Temp. (should be deleted at some point)
model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

enum Exposure {
  INDOOR
  OUTDOOR
  MOBILE
  UNKNOWN
}

enum Model {
  HOME_V2_LORA
}

model Device {
  id       String   @id @default(uuid())
  name     String
  exposure Exposure
  useAuth  Boolean?
  model String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  latitude  Float
  longitude Float

  sensors Sensor[]
  // @@index([location], name: "location_idx", type: Gist)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // the index for that column
  @@index([id], name: "device_id_idx", type: Hash)
}

model Sensor {
  id         String @id @default(uuid())
  title      String
  unit       String
  sensorType String

  lastMeasurement Json?

  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deviceId String
}

// Will be a timescaledb hypertable
model Measurement {
  sensorId String
  time     DateTime @default(now()) @db.Timestamptz(3)

  value Float?

  @@unique([sensorId, time])
}
